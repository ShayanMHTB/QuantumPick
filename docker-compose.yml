services:
  # PostgreSQL
  postgresql:
    build:
      context: ./img/postgres
      dockerfile: Dockerfile
    container_name: quantumpick_postgresql
    restart: always
    ports:
      - '${HOST_POSTGRESQL_PORT:-5432}:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-strong_password_here}
      - POSTGRES_DB=${POSTGRES_DB:-quantum_pick}
      - POSTGRES_MAX_CONNECTIONS=${POSTGRES_MAX_CONNECTIONS:-100}
      - POSTGRES_SHARED_BUFFERS=${POSTGRES_SHARED_BUFFERS:-128MB}
    volumes:
      - ./dbs/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-admin}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - quantumpick_network

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: quantumpick_pgadmin
    restart: always
    ports:
      - '${HOST_PGADMIN_PORT:-5050}:80'
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-pgadmin_password}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - ./dbs/pgadmin:/var/lib/pgadmin
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - quantumpick_network

  # Redis
  redis:
    build:
      context: ./img/redis
      dockerfile: Dockerfile
    container_name: quantumpick_redis
    restart: always
    ports:
      - '${HOST_REDIS_PORT:-6379}:6379'
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-null}
      - REDIS_MAXMEMORY=${REDIS_MAXMEMORY:-256mb}
    volumes:
      - ./dbs/redis:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - quantumpick_network

  # Redis Insight
  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: quantumpick_redisinsight
    restart: always
    ports:
      - '${HOST_REDIS_INSIGHT_PORT:-5540}:5540'
    volumes:
      - ./dbs/redisinsight:/db
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - quantumpick_network

  # RabbitMQ
  rabbitmq:
    build:
      context: ./img/rabbitmq
      dockerfile: Dockerfile
    container_name: quantumpick_rabbitmq
    restart: always
    ports:
      - '${HOST_RABBITMQ_PORT:-5672}:5672'
      - '${HOST_RABBITMQ_MANAGEMENT_PORT:-15672}:15672'
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST:-/}
    volumes:
      - ./dbs/rabbitmq:/var/lib/rabbitmq
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - quantumpick_network

  # Hardhat
  hardhat:
    build:
      context: ./img/hardhat
      dockerfile: Dockerfile
    container_name: quantumpick_hardhat
    volumes:
      - ./ctr:/app
      - ./dbs/hardhat:/app/hardhat-state
      # Anonymous volume for node_modules to prevent host contamination
      - /app/node_modules
    ports:
      - '${HOST_HARDHAT_PORT:-8545}:8545'
    environment:
      - HARDHAT_MNEMONIC=${HARDHAT_MNEMONIC:-test test test test test test test test test test test junk}
    networks:
      - quantumpick_network
    # No command needed - entrypoint handles everything

networks:
  quantumpick_network:
    driver: bridge
